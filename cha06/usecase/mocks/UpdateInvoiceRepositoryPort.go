// Code generated by mockery v1.0.0
package mocks

import domain "github.com/rwirdemann/restvoice/cha05/domain"
import mock "github.com/stretchr/testify/mock"

// UpdateInvoiceRepositoryPort is an autogenerated mock type for the UpdateInvoiceRepositoryPort type
type UpdateInvoiceRepositoryPort struct {
	mock.Mock
}

// ActivityById provides a mock function with given fields: id
func (_m *UpdateInvoiceRepositoryPort) ActivityById(id int) domain.Activity {
	ret := _m.Called(id)

	var r0 domain.Activity
	if rf, ok := ret.Get(0).(func(int) domain.Activity); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Activity)
	}

	return r0
}

// GetBookingsByInvoiceId provides a mock function with given fields: invoiceId
func (_m *UpdateInvoiceRepositoryPort) GetBookingsByInvoiceId(invoiceId int) []domain.Booking {
	ret := _m.Called(invoiceId)

	var r0 []domain.Booking
	if rf, ok := ret.Get(0).(func(int) []domain.Booking); ok {
		r0 = rf(invoiceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Booking)
		}
	}

	return r0
}

// GetInvoice provides a mock function with given fields: id, join
func (_m *UpdateInvoiceRepositoryPort) GetInvoice(id int, join ...string) domain.Invoice {
	_va := make([]interface{}, len(join))
	for _i := range join {
		_va[_i] = join[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 domain.Invoice
	if rf, ok := ret.Get(0).(func(int, ...string) domain.Invoice); ok {
		r0 = rf(id, join...)
	} else {
		r0 = ret.Get(0).(domain.Invoice)
	}

	return r0
}

// RateByProjectIdAndActivityId provides a mock function with given fields: projectId, activityId
func (_m *UpdateInvoiceRepositoryPort) RateByProjectIdAndActivityId(projectId int, activityId int) domain.Rate {
	ret := _m.Called(projectId, activityId)

	var r0 domain.Rate
	if rf, ok := ret.Get(0).(func(int, int) domain.Rate); ok {
		r0 = rf(projectId, activityId)
	} else {
		r0 = ret.Get(0).(domain.Rate)
	}

	return r0
}

// UpdateInvoice provides a mock function with given fields: invoice
func (_m *UpdateInvoiceRepositoryPort) UpdateInvoice(invoice domain.Invoice) error {
	ret := _m.Called(invoice)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Invoice) error); ok {
		r0 = rf(invoice)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
